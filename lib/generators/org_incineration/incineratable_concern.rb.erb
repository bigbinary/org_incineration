# frozen_string_literal: true

module IncinerableConcern
  extend ActiveSupport::Concern

  RETENTION_DAYS = OrgIncineration::Incinerator::RETENTION_DAYS

  def incinerable?
    cancelled? && cancelled_at.to_date < retention_date
  end

  def retention_date
    Date.today - RETENTION_DAYS.days
  end

  SKIPPED_MODELS =  ["Model1", "Model2"]
  MODELS_REQUIRE_DESTROY = ["Model3", "Model4"]

  included do
    scope :incinerables, -> { cancelled.where("Date(cancelled_at) < ?", retention_date) }

    def self.associated_models(org_id)
      {
        # "Payment": {
        #   joins: :invoice,
        #   where: ["organization_id =?", org_id]
        # },
        # "OrganizationUser": {
        #   joins: {},
        #   where: ["organization_id =?", org_id]
        # },
        # "Invoice": {
        #   joins: {},
        #   where: ["organization_id =?", org_id]
        # }
      }
    end
  end
end
